package udaw.casino.controller;

import udaw.casino.dto.ApuestaDTO;
import udaw.casino.exception.ResourceNotFoundException;
import udaw.casino.exception.SaldoInsuficienteException;
import udaw.casino.model.Apuesta;
import udaw.casino.service.RuletaService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import lombok.AllArgsConstructor; 
import lombok.Data;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@RestController
@RequestMapping("/api/juegos/ruleta") 
@AllArgsConstructor 
public class RuletaController {

    private final RuletaService ruletaService;

    /*
     * Endpoint to place a bet and play a round of Roulette, generating a winning number on the server.
     * Requires authenticated user context (handled by Spring Security later).
     *
     * @param usuarioId      The ID of the user placing the bet.
     * @param cantidad       The amount to bet.
     * @param tipoApuesta    The type of bet (e.g., "numero", "color").
     * @param valorApuesta   The value being bet on (e.g., "17", "rojo").
     * @return ResponseEntity containing the winning number and the resolved ApuestaDTO, or an error message.
     */
    @PostMapping("/jugar")
    public ResponseEntity<?> jugarRuleta(
            @RequestParam Long usuarioId,
            @RequestParam double cantidad,
            @RequestParam String tipoApuesta,
            @RequestParam String valorApuesta
            ) {


        try {
            // Generate a random winning number (including 0 and 00)
            Random random = new Random();
            String numeroGanador;
            
            // Generate a random number between 0 and 37
            // 0-36 will represent the standard numbers
            // 37 will represent "00"
            int randomNumber = random.nextInt(38);
            
            if (randomNumber == 37) {
                numeroGanador = "00";
            } else {
                numeroGanador = String.valueOf(randomNumber);
            }
            
            // Call service with the server-generated winning number
            Apuesta apuestaResuelta = ruletaService.jugarRuleta(usuarioId, cantidad, tipoApuesta, valorApuesta, numeroGanador);

            ApuestaDTO apuestaDTO = new ApuestaDTO(apuestaResuelta);

            // Create the response object with ApuestaDTO to prevent circular references
            RuletaResponse response = new RuletaResponse();
            response.setResolvedBet(apuestaDTO); // Already using ApuestaDTO
            // Set the winning number generated by the server
            response.setWinningNumber(numeroGanador);

            return ResponseEntity.ok(response); // Return 200 OK with response body

        } catch (SaldoInsuficienteException e) {
            return ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED).body(e.getMessage()); // 402 Payment Required
        } catch (ResourceNotFoundException e) {
            // Could be User not found or Roulette Game not found
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage()); // 404 Not Found
        } catch (IllegalArgumentException e) {
             // Catching potential IllegalArgumentException from service (e.g., invalid numeroGanador range, invalid bet type)
             return ResponseEntity.badRequest().body(e.getMessage()); // 400 Bad Request
        } catch (Exception e) {
             // Log the exception for internal review
             // logger.error("Unexpected error during /jugar request", e); // Add proper logging
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Ocurrió un error inesperado al procesar la apuesta."); // 500 Internal Server Error
        }
    }

    @PostMapping("/jugar/multi")
    public ResponseEntity<?> jugarRuletaMulti(@RequestBody List<ApuestaMultipleDTO> apuestas) {
        try {
            // Generate a random winning number (including 0 and 00)
            Random random = new Random();
            String numeroGanador;
            
            // Generate a random number between 0 and 37
            // 0-36 will represent the standard numbers
            // 37 will represent "00"
            int randomNumber = random.nextInt(38);
            
            if (randomNumber == 37) {
                numeroGanador = "00";
            } else {
                numeroGanador = String.valueOf(randomNumber);
            }

            List<RuletaResponse> respuestas = new ArrayList<>();

            for (ApuestaMultipleDTO apuestaDTO : apuestas) {
                Apuesta apuestaResuelta = ruletaService.jugarRuleta(
                    apuestaDTO.getUsuarioId(),
                    apuestaDTO.getCantidad(),
                    apuestaDTO.getTipoApuesta(),
                    apuestaDTO.getValorApuesta(),
                    numeroGanador
                );

                ApuestaDTO apuestaDTOResponse = new ApuestaDTO(apuestaResuelta);

                RuletaResponse response = new RuletaResponse();
                response.setResolvedBet(apuestaDTOResponse);
                response.setWinningNumber(numeroGanador);

                respuestas.add(response);
            }

            return ResponseEntity.ok(respuestas);

        } catch (SaldoInsuficienteException e) {
            return ResponseEntity.status(HttpStatus.PAYMENT_REQUIRED).body(e.getMessage());
        } catch (ResourceNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Ocurrió un error inesperado al procesar las apuestas múltiples.");
        }
    }


    @Data
    public static class ApuestaMultipleDTO {
        private Long usuarioId;
        private double cantidad;
        private String tipoApuesta;
        private String valorApuesta;
    }
    

    // Helper class for the response (Using Lombok @Data for brevity)
    @Data // Generates getters, setters, toString, equals, hashCode
    private static class RuletaResponse {
        private String winningNumber; // Changed from int to String to support "00"
        private ApuestaDTO resolvedBet; // Details of the processed bet
    }

}